<.header>
  <%= if assigns[:exercise] do %>
    <%= gettext "Editing exercise %{exercise_name}", exercise_name: @exercise.title %>
  <% else %>
    <%= gettext "New exercise" %>
  <% end %>
  
  <:actions>
    <%= if assigns[:exercise] do %>
      <.back navigate={~p"/exercises/#{@exercise}"}><%= gettext "Back to exercise" %></.back>
    <% else %>
      <.back navigate={~p"/exercises/"}><%= gettext "Back to exercises" %></.back>
    <% end %>
  </:actions>
</.header>

<.simple_form 
  :let={f}
  for={@changeset} 
  phx-change="validate" 
  phx-submit="save" 
  action={if assigns[:exercise], do: ~p"/exercises/#{@exercise}", else: ~p"/exercises"}
  class="mt-8">
  <%!-- <.error :if={@changeset.action}>
    Oops, something went wrong! Please check the errors below.
  </.error> --%>
  <.input field={f[:title]} type="text" label={gettext "Title"} />
  <div id="desc-container" phx-update="ignore">
    <.input id="description-form" field={f[:description]} type="hidden" label={gettext("Description") <> " (Markdown)"}/>
    <div id="description" class="text-lg border-2 dark:border-zinc-800" phx-hook="MdEditor"><p class="hidden"><%= f[:description].value %></p></div>
  </div>
  <.input field={f[:public]} type="checkbox" label={gettext("Public") <> "?"} />
  <div>
    <.label>
      <%= gettext("Test file") <> " (main.c)" %>
    </.label>
    <div id="editor1-container" class="editor-container" phx-update="ignore">
      <div id="editor1-loading" class="editor-loading">
        <p><%= gettext "Loading editor" %></p>
        <Heroicons.cog_6_tooth class="w-10 animate-[reverse-spin_3s_linear_infinite]"/>
      </div>

      <div id="editor1" class="editor" phx-hook="Editor" data-form="true"><%= f[:test_file].value %></div>
    </div>
    <.input hidden type="hidden" field={f[:test_file]} id="editor1-code" phx-update="ignore"></.input>
   </div>
  <div>
    <.label>
      <%= gettext("Submission template") <> " (sub.c)" %>
    </.label>
    <div id="editor2-container" class="editor-container" phx-update="ignore">
      <div id="editor2-loading" class="editor-loading">
        <p><%= gettext "Loading editor" %></p>
        <Heroicons.cog_6_tooth class="w-10 animate-[reverse-spin_3s_linear_infinite]"/>
      </div>

      <div id="editor2" class="editor" phx-hook="Editor" data-form="true"><%= f[:template].value %></div>
    </div>
    <.input hidden type="hidden" field={f[:template]} id="editor2-code" phx-update="ignore"></.input>
  </div>

  <h2 class="text-2xl font-bold"><%= gettext "Tests" %></h2>
  <.inputs_for :let={tf} field={f[:tests]}>
    <.input :if={is_nil(tf.data.temp_id)} field={tf[:id]} type="hidden" />
    <input type="hidden" name="exercise[tests_order][]" value={tf.index} />
    <div class="bg-zinc-200 dark:bg-zinc-800 p-4 rounded-xl border-2 border-zinc-300 dark:border-zinc-700">
      <div class={["space-y-2", (if tf[:delete].value == "true", do: "blur-sm")]}>
        <.input field={tf[:description]} type="text" label={gettext "Description"} placeholder={gettext("If left empty, the input will be used as the description.")} />
        <.input field={tf[:input]} type="textarea" label={gettext "Input"} mono />
        <div class="flex w-full items-center gap-5">
          <div class="w-48">
            <.input field={tf[:type]} type="select" options={[ {gettext("Exact"), "exact"}, {gettext("Regex"), "regex"}, {gettext("Items"), "items"}] } label={gettext "Output type"} />
          </div>
          <div class="cursor-pointer" phx-click={JS.toggle(to: "#test-type-tooltip-#{tf.index}")} >
            <Heroicons.question_mark_circle class="h-6 w-6 hover:text-gray-500 duration-200" />
          </div>
          <div class="relative">
            <div id={"test-type-tooltip-#{tf.index}"} hidden class="absolute left-0 w-[512px] -top-20 bg-zinc-300 dark:bg-zinc-600 px-4 py-2 rounded-xl select-none shadow-lg">
              <p><b><%= gettext "Exact" %></b>: <%= gettext "verifies if the expected output coincides with the real output (ignoring leading and trailing whitespace)." %></p>
              <p><b><%= gettext "Regex" %></b>: <%= gettext "verifies if the real output matches the regular expression specified in the expected output." %></p>
              <p><b><%= gettext "Items" %></b>: <%= gettext "verifies if the real output contains all of the values specified in the expected output (one per line)." %></p>
            </div>
          </div>
        </div>
        <.input field={tf[:expected_output]} type="textarea" label={gettext "Expected output"} mono />
        <.input field={tf[:grade]} type="text" label={ gettext "Grade %" }/>
        <.input field={tf[:visible]} type="checkbox" label={ gettext "Visible to students before submitting?"} />
      </div>
      <%!-- <label class="cursor-pointer">
        <input id={"checkbox#{tf.index}"} type="checkbox" name="exercise[tests_delete][]" class="" value={tf.index}/>
        <div class="w-full flex items-center justify-end gap-2 px-4 text-red-600">
          <Heroicons.trash class="w-6 h-6"/>
          <p class="text-red-600"><%= gettext "Delete" %></p>
        </div>
      </label> --%>
      <div class="w-full flex items-center justify-end gap-2 px-4 text-red-600">
        <%= if is_nil(tf.data.temp_id) do %>
          <p><%= gettext "Delete" %></p>
          <Heroicons.trash class="w-6 h-6"/>
          <.input field={tf[:delete]} type="checkbox" />
        <% else %>
          <.input field={tf[:temp_id]} type="hidden"/>
          <a href="#" phx-click="remove-test" phx-value-remove={tf.data.temp_id}><Heroicons.x_mark class="w-6 h-6" /></a>
        <% end %>
      </div>
    </div>
  </.inputs_for>
  <%!-- <label class="cursor-pointer flex flex-col items-center">
    <input type="checkbox" name="exercise[tests_order][]" class="hidden" />
    <div class="flex items-center gap-2 bg-zinc-300 dark:bg-zinc-600 hover:bg-zinc-400 dark:hover:bg-zinc-500 px-4 py-2 rounded-lg duration-200">
      <Heroicons.plus_circle class="w-6 h-6"/>
      <p><%= gettext "Add test" %></p>
    </div>
  </label> --%>
  <div class="flex flex-col items-center">
    <button type="button" phx-click="add-test" class="mx-auto bg-zinc-300 dark:bg-zinc-500 hover:bg-zinc-400 dark:hover:bg-zinc-400 px-4 py-2 rounded-lg duration-200"><%= "+ " <> gettext "Add test" %></button>
  </div>

  <h2 class="text-2xl font-bold"><%= gettext "Parameters" %></h2>
  <.inputs_for :let={tf} field={f[:parameters]}>
    <.input :if={is_nil(tf.data.temp_id)} field={tf[:id]} type="hidden" />
    <input type="hidden" name="exercise[params_order][]" value={tf.index} />
    <div class="bg-zinc-200 dark:bg-zinc-800 p-4 rounded-xl border-2 border-zinc-300 dark:border-zinc-700">
      <div class={["space-y-2", (if tf[:delete].value == "true", do: "blur-sm")]}>
        <%!-- <.input field={tf[:description]} type="text" label={gettext "Description"} placeholder={gettext("If left empty, the input will be used as the description.")} /> --%>
        <div class="grid grid-cols-[1fr_min-content] items-center gap-4">
        <.input field={tf[:key]} type="select" options={[ 
          {gettext("Program uses recursion"), 1},
          {gettext("Program uses loops"), 2},
          {gettext("Program uses pointers"), 3},
          {gettext("Program uses dynamic memory"), 4},
          {gettext("Program frees allocated memory"), 5},
          {gettext("Function X is used"), 10},
          {gettext("Function X is recursive"), 11},
          {gettext("Function X is iterative"), 12},
          {gettext("Function X uses pointers"), 13},
          {gettext("Function X uses dynamic memory"), 14},
          {gettext("Function X frees allocated memory"), 15},
          ] 
        } label={gettext "Check if"} />
        <.input field={tf[:negative]} type="checkbox" label="Invert?"/>
        </div>
        <%= if tf[:key].value && tf[:key].value >= 10 do %>
          <.input field={tf[:value]} type="text" label={gettext "Function name"} mono />
        <% end %>
        <div class="flex w-full items-center gap-5">
          <div class="w-48">
            <.input field={tf[:type]} type="select" options={[ {gettext("Optional"), "optional"}, {gettext("Graded"), "graded"}, {gettext("Mandatory"), "mandatory"}] } label={gettext "Parameter type"} />
          </div>
          <div class="cursor-pointer" phx-click={JS.toggle(to: "#param-type-tooltip-#{tf.index}")} >
            <Heroicons.question_mark_circle class="h-6 w-6 hover:text-gray-500 duration-200" />
          </div>
          <div class="relative">
            <div id={"param-type-tooltip-#{tf.index}"} hidden class="absolute left-0 w-[512px] -top-20 bg-zinc-300 dark:bg-zinc-600 px-4 py-2 rounded-xl select-none shadow-lg">
              <p><b><%= gettext "Optional" %></b>: <%= gettext "if the parameter fails, a warning will be displayed, but it won't affect a submission's total grade." %></p>
              <p><b><%= gettext "Graded" %></b>: <%= gettext "the parameter's grade contributes to a submission's total grade." %></p>
              <p><b><%= gettext "Mandatory" %></b>: <%= gettext "the parameter must be passed in order for a submission to be graded, otherwise the total grade will always be 0%." %></p>
            </div>
          </div>
        </div>
        <%= if tf[:type].value == :graded do %>
          <.input field={tf[:grade]} type="text" label={ gettext "Grade %" }/>
        <% end %>
        <.input field={tf[:visible]} type="checkbox" label={ gettext "Visible to students before submitting?"} />
      </div>
      <%!-- <label class="cursor-pointer">
        <input id={"checkbox#{tf.index}"} type="checkbox" name="exercise[tests_delete][]" class="" value={tf.index}/>
        <div class="w-full flex items-center justify-end gap-2 px-4 text-red-600">
          <Heroicons.trash class="w-6 h-6"/>
          <p class="text-red-600"><%= gettext "Delete" %></p>
        </div>
      </label> --%>
      <div class="w-full flex items-center justify-end gap-2 px-4 text-red-600">
        <%= if is_nil(tf.data.temp_id) do %>
          <p><%= gettext "Delete" %></p>
          <Heroicons.trash class="w-6 h-6"/>
          <.input field={tf[:delete]} type="checkbox" />
        <% else %>
          <.input field={tf[:temp_id]} type="hidden"/>
          <a href="#" phx-click="remove-parameter" phx-value-remove={tf.data.temp_id}><Heroicons.x_mark class="w-6 h-6" /></a>
        <% end %>
      </div>
    </div>
  </.inputs_for>
  <%!-- <label class="cursor-pointer flex flex-col items-center">
    <input type="checkbox" name="exercise[tests_order][]" class="hidden" />
    <div class="flex items-center gap-2 bg-zinc-300 dark:bg-zinc-600 hover:bg-zinc-400 dark:hover:bg-zinc-500 px-4 py-2 rounded-lg duration-200">
      <Heroicons.plus_circle class="w-6 h-6"/>
      <p><%= gettext "Add test" %></p>
    </div>
  </label> --%>
  <div class="flex flex-col items-center">
    <button type="button" phx-click="add-parameter" class="mx-auto bg-zinc-300 dark:bg-zinc-500 hover:bg-zinc-400 dark:hover:bg-zinc-400 px-4 py-2 rounded-lg duration-200"><%= "+ " <> gettext "Add parameter" %></button>
  </div>

  <.error :if={length(f[:total_grade].errors) > 0}><%= dgettext "errors", "The sum of every grade should equal 100!" %></.error>
  <:actions>
    <.button id="submit-button" class="flex items-center gap-2">
      <svg class="w-5 h-5 fill-white" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!--! Font Awesome Pro 6.4.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. --><path d="M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V173.3c0-17-6.7-33.3-18.7-45.3L352 50.7C340 38.7 323.7 32 306.7 32H64zm0 96c0-17.7 14.3-32 32-32H288c17.7 0 32 14.3 32 32v64c0 17.7-14.3 32-32 32H96c-17.7 0-32-14.3-32-32V128zM224 288a64 64 0 1 1 0 128 64 64 0 1 1 0-128z"/></svg>
      <%= gettext "Save Exercise" %>
    </.button>
  </:actions>
</.simple_form>